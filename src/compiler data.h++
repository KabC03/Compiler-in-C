#ifndef COMPILER_DATA_HH
#define COMPILER_DATA_HH


#define NUMBER_OF_TOKENS 19
#define MAX_TOKEN_LENGTH 8


#include <string>
extern const char validTokens[NUMBER_OF_TOKENS][MAX_TOKEN_LENGTH];


typedef enum TOKEN_TYPE {

    TOK_END_OF_STREAM = -1,
    TOK_IMM_INT = -2,
    TOK_STRING = -3,


    TOK_INVALID = 0,
    TOK_SET = 1,
    TOK_VAR_DECL = 2,
    TOK_FUN_CALL = 3,
    TOK_FUN_DECL = 4,


    TOK_INT = 5,
    TOK_ASSIGN = 6,
    TOK_ADD = 7,
    TOK_SUB = 8,
    TOK_MUL = 9,


    TOK_DIV = 10,
    TOK_MOD = 11,
    TOK_LESS = 12,
    TOK_EQUAL = 13,
    TOK_LESS_EQUAL = 14,


    TOK_IF = 15,
    TOK_ENDIF = 16,
    TOK_GTO = 17,
    TOK_LBL = 18,


} TOKEN_TYPE;




typedef struct Token {

    TOKEN_TYPE tokenType;

    //Immediates and variables
    std::string string;  //User string (func name, variable, etc - parser must determine based on context)

    int immInt;     //Integer immediate

} Token;




#endif //COMPILER_DATA_HH

//NOTE: Generated by python script



