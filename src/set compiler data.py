# 30 Aug 2024
# This file generates the compiler data.h and compiler data.c files
import sys


#Print a newline every newLineConstant lines in the .c and .h files
newLineConstant = 5;


defineNameNumberOfTokens = "NUMBER_OF_TOKENS";
defineNameMaxTokenLength = "MAX_TOKEN_LENGTH";
tokenStruct = """

typedef struct Token {

    TOKEN_TYPE tokenType;

    //Immediates and variables
    std::string string;  //User string (func name, variable, etc - parser must determine based on context)

    int immInt;     //Integer immediate

} Token;
""";


librariesToInclude = [

    "<string>",
];



outputFolder = "./src/";

hFile = "compiler data.h++";
cFile = "compiler data.c++";
headerGuardName = "COMPILER_DATA_HH";


#Tokens to pre-append (Appear in .h but not .c file)
tokensPreappend = [

    "TOK_END_OF_STREAM",
    "TOK_IMM_INT",
    "TOK_STRING",

];


#Tokens to append to the files
tokens = {

    #Internal types
    "invalid" : "TOK_INVALID",

    #Instructions
    "set" : "TOK_SET", "dec" : "TOK_DEC", 
    "if" : "TOK_IF", "endif" : "TOK_ENDIF", "goto" : "TOK_GOTO", "label" : "TOK_LABEL",

    #Operators
    "+" : "TOK_ADD", "-" : "TOK_SUB", "*" : "TOK_MUL", "/" : "TOK_DIV","\%" : "TOK_MOD", 
    "<<" : "TOK_LESS", "==" : "TOK_EQUAL", "<=" : "TOK_LESS_EQUAL", "=" : "TOK_ASSIGN",



};

numberOfTokens = 0;
maxTokenSize = 0;







#Write to the .h file
def write_h_file():

    try:
        
        with open(str(outputFolder + hFile), 'w') as file:
        
            #Write header guards
            file.write("#ifndef " + str(headerGuardName) + "\n");
            file.write("#define " + str(headerGuardName) + "\n\n\n");

            #Define constants
            file.write("#define " + str(defineNameNumberOfTokens) + " " + str(numberOfTokens) + "\n");
            file.write("#define " + str(defineNameMaxTokenLength) + " " + str(maxTokenSize) + "\n\n\n");


            #Include libraries
            for library in librariesToInclude:
                file.write("#include " + str(library) + "\n");

            file.write("extern const char validTokens[" + str(defineNameNumberOfTokens) + "][" + str(defineNameMaxTokenLength) + "];\n" ) 

            file.write("\n\ntypedef enum TOKEN_TYPE {\n\n");


            counter = -1;
            for token in tokensPreappend:
                
                if (-1 * counter) % newLineConstant == 0:
                    file.write("\n\n");
                file.write("    " + str(token) + " = " + str(counter) + ",\n");
                counter -= 1;

            counter = 0;
            for value in tokens.values():

                if counter % newLineConstant == 0:
                    file.write("\n\n");

                file.write("    " + str(value) + " = " + str(counter) + ",\n");
                counter += 1;

            file.write("\n\n} TOKEN_TYPE;\n");


            file.write("\n\n" + str(tokenStruct) + "\n\n");




            file.write("\n\n#endif //" + str(headerGuardName) + "\n\n");
            file.write("//NOTE: Generated by python script\n\n\n\n");






        return True; 
    
    
    except:
        return False;




#Write to the .c file
def write_c_file():

    global numberOfTokens;
    global maxTokenSize;

    numberOfTokens = len(tokens);
    maxTokenSize = 0;
    for token in tokens:
        if len(token) > maxTokenSize:
            maxTokenSize = len(token);

    maxTokenSize += 1; #Make space for NULL terminator

    try:
        with open(str(outputFolder + cFile), 'w') as file:
            file.write("#include " + "\"" + str(hFile) + "\"\n\n\n");


            file.write("const char validTokens[" + str(defineNameNumberOfTokens) + "][" + str(defineNameMaxTokenLength) + "] = {\n");

            counter = 0;
            for key in tokens.keys():

                if counter % newLineConstant == 0:
                    file.write("\n\n\n\n    ");

                file.write("\"" + key + "\",");
            
                counter += 1;

            file.write("\n\n};\n\n");
        
            file.write("//NOTE: Generated by python script\n\n\n\n");
        return True; 
    
    
    except:
        return False;



#Main function
def main():
    
    if(write_c_file() == False):
        print("Failed to write data to .c file: " + str(cFile));
        return -1;


    if(write_h_file() == False):
        print("Failed to write data to .c file: " + str(hFile));
        return -2;


    return 0;







if __name__ == "__main__":
    sys.exit(main());




