# 10, Jul, 24
# This file generates the compiler data.h and compiler data.c files



#Print a newline every newLineConstant lines in the .c and .h files
newLineConstant = 5;


defineNameNumberOfTokens = "NUMBER_OF_TOKENS";
defineNameMaxTokenLength = "MAX_TOKEN_LENGTH";

hFile = "./compiler data.h";
cFile = "./compiler data.c";


#Tokens to append to the files
tokens = [

    #Datatypes
    "int", "flt", "chr", "@",

    #Operators
    "+", "-", "*", "/","%%","||", "&&",
    "==", "!=", ">=", "<=", ">>", "<<", 


    #Control flow
    "if", "gto", "lbl",

    #Functions
    "fn", "ret",

    #Inbuilt functions
    "allocate", "free", "sizeof",

    #Organisation
    "//",

    #Misc
    "<", ">", "[", "]", "(", ")", "{", "}", ",", ".", ";",
];

numberOfTokens = 0;
maxTokenSize = 0;




#Write to the .h file
def write_h_file():

    




#Write to the .c file
def write_c_file():

    numberOfTokens = len(tokens);
    maxTokenSize = 0;
    for token in tokens:
        if len(token) > maxTokenSize:
            maxTokenSize = len(token);

    try:
        with open(cFile, 'w') as file:
            file.write("#include " + "\"" + str(hFile) + "\"\n\n\n");


            file.write("const char validTokens[" + str(defineNameNumberOfTokens) + "][" + str(defineNameMaxTokenLength) + "] = {\n");

            counter = 0;
            for token in tokens:

                if counter % newLineConstant == 0:
                    file.write("\n\n");

                file.write("\"" + token + "\",");
            
                counter += 1;

            file.write("\n\n};\n\n");
        
            file.write("//NOTE: Generated by python script\n\n\n\n");
        return True; 
    
    
    except:
        return False;



#Main function
def main():
    
    if(write_c_file() == False):
        print("Failed to write data to .c file: " + str(cFile));
        return -1;


    if(write_h_file() == False):
        print("Failed to write data to .c file: " + str(hFile));
        return -2;


    return 0;







if __name__ == "__main__":
    main();














 
